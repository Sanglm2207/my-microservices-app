#!/bin/bash

# --- Script qu·∫£n l√Ω Monorepo Microservices ---
# D·ª´ng script ngay l·∫≠p t·ª©c n·∫øu c√≥ b·∫•t k·ª≥ l·ªánh n√†o th·∫•t b·∫°i
set -e

# --- C√ÅC BI·∫æN ---
# Li·ªát k√™ t√™n c√°c app c√≥ th·ªÉ ch·∫°y ƒë·ªôc l·∫≠p
APPS=("api-gateway" "auth-service" "user-service")

# --- H√ÄM HI·ªÇN TH·ªä H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG ---
show_usage() {
  echo "-----------------------------------------------------"
  echo "Usage: ./manage.sh <command> [service_name]"
  echo "-----------------------------------------------------"
  echo ""
  echo "Commands:"
  echo "  dev       Ch·∫°y t·∫•t c·∫£ c√°c service ·ªü ch·∫ø ƒë·ªô development."
  echo "  dev <app> Ch·∫°y m·ªôt service c·ª• th·ªÉ ·ªü ch·∫ø ƒë·ªô development."
  echo "            <app> can be: api-gateway, auth-service, user-service"
  echo ""
  echo "  build     Build t·∫•t c·∫£ c√°c app v√† package."
  echo "  build <app> Build m·ªôt app ho·∫∑c package c·ª• th·ªÉ."
  echo "  build:libs  Ch·ªâ build c√°c th∆∞ vi·ªán trong th∆∞ m·ª•c 'packages/'."
  echo ""
  echo "  lint      Lint to√†n b·ªô project."
  echo ""
  echo "  db:migrate Ch·∫°y migration cho database (prisma)."
  echo ""
  echo "  clean     X√≥a t·∫•t c·∫£ node_modules, c√°c th∆∞ m·ª•c build/dist v√† .turbo."
  echo "            H·ªØu √≠ch khi c·∫ßn c√†i ƒë·∫∑t l·∫°i t·ª´ ƒë·∫ßu."
  echo ""
  echo "V√≠ d·ª•:"
  echo "  ./manage.sh dev"
  echo "  ./manage.sh dev api-gateway"
  echo "  ./manage.sh build user-service"
  echo "  ./manage.sh clean"
  echo "-----------------------------------------------------"
}

# --- LOGIC CH√çNH C·ª¶A SCRIPT ---

# L·∫•y command (dev, build,...) v√† service_name
COMMAND=$1
SERVICE_NAME=$2

# N·∫øu kh√¥ng c√≥ command n√†o ƒë∆∞·ª£c cung c·∫•p, hi·ªÉn th·ªã h∆∞·ªõng d·∫´n v√† tho√°t
if [ -z "$COMMAND" ]; then
  show_usage
  exit 1
fi

# X·ª≠ l√Ω c√°c command
case "$COMMAND" in
  dev)
    if [ -z "$SERVICE_NAME" ]; then
      echo "üöÄ B·∫Øt ƒë·∫ßu ch·∫°y T·∫§T C·∫¢ c√°c service ·ªü ch·∫ø ƒë·ªô development..."
      pnpm turbo dev
    else
      # Ki·ªÉm tra xem service_name c√≥ h·ª£p l·ªá kh√¥ng
      if [[ " ${APPS[@]} " =~ " ${SERVICE_NAME} " ]]; then
        echo "üöÄ B·∫Øt ƒë·∫ßu ch·∫°y service '$SERVICE_NAME' ·ªü ch·∫ø ƒë·ªô development..."
        pnpm turbo dev --filter=$SERVICE_NAME
      else
        echo "‚ùå L·ªói: Service '$SERVICE_NAME' kh√¥ng h·ª£p l·ªá."
        echo "C√°c service h·ª£p l·ªá: ${APPS[*]}"
        exit 1
      fi
    fi
    ;;

  build)
    if [ -z "$SERVICE_NAME" ]; then
      echo "üì¶ B·∫Øt ƒë·∫ßu build T·∫§T C·∫¢ c√°c app v√† package..."
      pnpm turbo build
    else
      echo "üì¶ B·∫Øt ƒë·∫ßu build app/package '$SERVICE_NAME'..."
      pnpm turbo build --filter=$SERVICE_NAME
    fi
    ;;

  build:libs)
    echo "üìö B·∫Øt ƒë·∫ßu build c√°c th∆∞ vi·ªán trong 'packages/'..."
    pnpm build:libs
    ;;

  lint)
    echo "üîç B·∫Øt ƒë·∫ßu lint to√†n b·ªô project..."
    pnpm turbo lint
    ;;

  db:migrate)
    echo "üóÑÔ∏è B·∫Øt ƒë·∫ßu ch·∫°y database migration..."
    # L·ªánh n√†y s·∫Ω ch·∫°y script "db:migrate" trong package "database"
    pnpm --filter auth-service db:migrate
    ;;

  clean)
    echo "üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp project..."

    # X√≥a th∆∞ m·ª•c .turbo ·ªü g·ªëc
    echo "   - X√≥a th∆∞ m·ª•c .turbo"
    rm -rf .turbo

    # X√≥a file pnpm-lock.yaml ·ªü g·ªëc
    echo "   - X√≥a file pnpm-lock.yaml"
    rm -f pnpm-lock.yaml

    # S·ª≠ d·ª•ng find ƒë·ªÉ x√≥a t·∫•t c·∫£ node_modules, dist, build, .next
    echo "   - X√≥a t·∫•t c·∫£ c√°c th∆∞ m·ª•c node_modules, dist, build..."
    find . -type d \( -name "node_modules" -o -name "dist" -o -name "build" -o -name ".next" \) -prune -exec rm -rf '{}' +

    echo "‚úÖ D·ªçn d·∫πp ho√†n t·∫•t. B·∫°n c√≥ th·ªÉ ch·∫°y 'pnpm install' ƒë·ªÉ c√†i ƒë·∫∑t l·∫°i t·ª´ ƒë·∫ßu."
    exit 0 # Tho√°t ngay sau khi clean, kh√¥ng c·∫ßn in "Ho√†n th√†nh!" n·ªØa
    ;;

  *)
    echo "‚ùå L·ªói: Command '$COMMAND' kh√¥ng h·ª£p l·ªá."
    echo ""
    show_usage
    exit 1
    ;;
esac

echo "‚úÖ Ho√†n th√†nh!"